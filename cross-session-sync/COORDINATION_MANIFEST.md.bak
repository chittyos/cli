# Cross-Session Coordination Manifest

## Active Coordination Protocol: v2.0

This file programs the behavior of AI sessions by attaching to their native functions.

## üîå Programmable Hooks Configuration

### File Operation Hooks
```yaml
before_write:
  - check_file_lock
  - validate_coordination_format
  - update_session_timestamp

after_write:
  - notify_other_sessions
  - update_coordination_log
  - trigger_github_action

before_read:
  - check_file_freshness
  - acquire_read_lock

after_read:
  - release_read_lock
  - cache_coordination_state
```

### Git Operation Hooks
```yaml
before_commit:
  - add_session_tag: "[SESSION-{id}]"
  - check_branch_conflicts
  - validate_coordination_state

after_push:
  - notify_github_webhook
  - update_notion_dashboard
  - trigger_neon_sync

before_merge:
  - check_all_sessions_ready
  - validate_no_conflicts
  - create_backup_branch
```

### Task Management Hooks
```yaml
before_task_claim:
  - check_task_availability
  - verify_session_capacity
  - check_dependencies_complete

after_task_complete:
  - release_task_lock
  - update_notion_task
  - notify_dependent_tasks
  - trigger_next_task
```

## üéØ Coordination Rules

### Session Registration
When a new session starts, it MUST:
1. Read this manifest file
2. Generate unique session ID
3. Create session file in `.ai-coordination/sessions/`
4. Start heartbeat every 30 seconds
5. Check for existing locks and tasks

### Task Claiming Protocol
```markdown
1. Check `.ai-coordination/tasks/` for unclaimed tasks
2. Attempt to create lock file: `task-{id}.lock`
3. If successful, update session tasks array
4. If failed, find alternative task
5. Update COORDINATION.md with claim
```

### Resource Locking
```markdown
LOCK FORMAT: {resource}.lock
CONTENT: {"session": "id", "time": 1234567890, "ttl": 300}

Before modifying shared resources:
1. Check for existing lock
2. If locked and not expired, wait or skip
3. If expired, remove and acquire
4. Create lock with 5-minute TTL
5. Release immediately after operation
```

### Conflict Resolution
```markdown
When conflicts detected:
1. Session with earlier timestamp wins
2. Later session must:
   - Rebase changes
   - Find alternative task
   - Update coordination state
```

## üìä Current Session Status

| Session ID | Model | Status | Current Task | Last Heartbeat | Branch |
|------------|--------|---------|--------------|----------------|---------|
| *Auto-populated by sessions* | | | | | |

## üìù Task Queue

| Task ID | Description | Status | Owner | Priority | Dependencies |
|---------|-------------|---------|--------|-----------|--------------|
| sync-001 | Implement Neon sync | pending | - | high | - |
| sync-002 | Setup GitHub Actions | pending | - | medium | sync-001 |
| sync-003 | Create Notion dashboard | pending | - | low | - |
| sync-004 | Test coordination | pending | - | high | sync-001, sync-002 |

## üîÑ Coordination Events Log

<!-- Sessions append events here -->
<!-- EVENT: session_started | SESSION: {id} | TIME: {timestamp} -->
<!-- EVENT: task_claimed | SESSION: {id} | TASK: {task_id} | TIME: {timestamp} -->
<!-- EVENT: task_completed | SESSION: {id} | TASK: {task_id} | TIME: {timestamp} -->

## üöÄ Programmable Workflows

### Workflow: Deploy Coordination System
```yaml
trigger: "task sync-004 completed"
steps:
  1. merge_all_session_branches
  2. run_integration_tests
  3. deploy_to_cloudflare
  4. update_neon_production
  5. notify_notion_complete
```

### Workflow: Session Handoff
```yaml
trigger: "session ending"
steps:
  1. save_session_state
  2. release_all_locks
  3. unclaim_incomplete_tasks
  4. update_coordination_manifest
  5. notify_next_session
```

## üîó Integration Endpoints

### Cloudflare Worker
```
POST https://cross-session-sync.workers.dev/session/register
POST https://cross-session-sync.workers.dev/task/claim
GET  https://cross-session-sync.workers.dev/sync/status
```

### Neon Database
```sql
-- Connection string in environment
DATABASE_URL="postgresql://..."

-- Key tables
sessions, tasks, resource_locks, sync_events
```

### GitHub Webhooks
```
Workflow: .github/workflows/coordination-sync.yml
Webhook: POST /webhook/coordination
Events: push, pull_request, issue_comment
```

### Notion API
```
Database ID: {NOTION_SESSIONS_DB}
Integration Token: {NOTION_TOKEN}
Dashboard URL: https://notion.so/coordination-dashboard
```

## üõ†Ô∏è Programmable Extensions

### Custom Hook: Auto-Branch Creation
```javascript
// Automatically create session branch on start
hook('session_start', async (session) => {
  await git(`checkout -b session-${session.id}`);
  await git(`push -u origin session-${session.id}`);
});
```

### Custom Hook: Smart Task Assignment
```javascript
// Assign tasks based on AI model strengths
hook('before_task_claim', async (task, session) => {
  if (task.type === 'code' && session.model === 'claude') {
    return { priority: 10 }; // Prefer Claude for coding
  }
  if (task.type === 'creative' && session.model === 'gpt') {
    return { priority: 10 }; // Prefer GPT for creative
  }
});
```

### Custom Hook: Coordination Metrics
```javascript
// Track coordination efficiency
hook('after_task_complete', async (task, session) => {
  metrics.record({
    task_id: task.id,
    session_id: session.id,
    duration: Date.now() - task.started,
    model: session.model
  });
});
```

## üîê Security Rules

1. **No credentials in coordination files**
2. **Use environment variables for secrets**
3. **Validate all file operations**
4. **Sanitize git commit messages**
5. **Respect rate limits on APIs**

## üìà Performance Optimization

1. **Cache coordination state for 60 seconds**
2. **Batch file operations when possible**
3. **Use lock-free algorithms where safe**
4. **Minimize coordination file size**
5. **Clean up stale locks automatically**

## üîß Maintenance Commands

```bash
# Reset coordination state
rm -rf .ai-coordination && mkdir -p .ai-coordination/{sessions,tasks,locks}

# Clean stale sessions
find .ai-coordination/sessions -mmin +10 -delete

# View active locks
ls -la .ai-coordination/locks/

# Monitor coordination events
tail -f .ai-coordination/events.jsonl
```

## üìã Session Checklist

When starting a new session, ensure:
- [ ] Read COORDINATION_MANIFEST.md
- [ ] Register session with unique ID
- [ ] Check existing tasks and locks
- [ ] Start heartbeat timer
- [ ] Create session branch
- [ ] Update session table above
- [ ] Begin task claiming process

## üé≠ AI Model Instructions

**For Claude Sessions:**
```
You are a Claude session in a distributed coordination system.
Prioritize: code generation, analysis, system design
Check coordination before any major operation
Update status every 5 operations
```

**For GPT Sessions:**
```
You are a GPT session in a distributed coordination system.
Prioritize: creative tasks, documentation, API integration
Check coordination before any major operation
Update status every 5 operations
```

---

**Protocol Version:** 2.0
**Last Updated:** {auto-update on write}
**Active Sessions:** {count from sessions/}
**Tasks Completed:** {count from events log}

<!-- COORDINATION-CHECKSUM: {auto-calculated} -->