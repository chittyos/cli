name: MCP Extension Release

on:
  push:
    tags:
      - 'mcp-v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.0.2)'
        required: true
        type: string

permissions:
  contents: write
  packages: write
  actions: read

jobs:
  build-and-release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: chittyos-mcp-extension/package-lock.json

      - name: Install dependencies
        working-directory: chittyos-mcp-extension
        run: npm ci

      - name: Install mcpb bundler
        run: npm install -g @anthropic-ai/mcpb

      - name: Validate manifest
        working-directory: chittyos-mcp-extension
        run: mcpb validate manifest.json

      - name: Run tests
        working-directory: chittyos-mcp-extension
        run: |
          # Test server startup
          timeout 5 node chittymcp.js || true

          # Validate ChittyID service integration
          node -e "
            const server = require('./chittymcp.js');
            console.log('ChittyMCP server validated');
          "

      - name: Build extension package
        working-directory: chittyos-mcp-extension
        run: |
          mcpb pack
          ls -la *.mcpb

      - name: Generate checksums
        working-directory: chittyos-mcp-extension
        run: |
          sha256sum chittyos-mcp-extension.mcpb > chittyos-mcp-extension.mcpb.sha256
          md5sum chittyos-mcp-extension.mcpb > chittyos-mcp-extension.mcpb.md5

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            chittyos-mcp-extension/chittyos-mcp-extension.mcpb
            chittyos-mcp-extension/chittyos-mcp-extension.mcpb.sha256
            chittyos-mcp-extension/chittyos-mcp-extension.mcpb.md5
            chittyos-mcp-extension/README.md
          tag_name: ${{ github.event.inputs.version && format('mcp-v{0}', github.event.inputs.version) || github.ref_name }}
          name: ChittyOS MCP Extension ${{ github.event.inputs.version || github.ref_name }}
          body: |
            ## ChittyOS MCP Desktop Extension

            Enterprise-grade legal and business infrastructure with §36 compliance for Claude Desktop.

            ### Installation
            1. Download `chittyos-mcp-extension.mcpb`
            2. Open Claude Desktop
            3. Go to Extensions → Install Extension
            4. Select the downloaded file
            5. Configure your ChittyID token

            ### Checksums
            - SHA256: See `chittyos-mcp-extension.mcpb.sha256`
            - MD5: See `chittyos-mcp-extension.mcpb.md5`

            ### What's New
            - Full §36 compliance with ChittyID service integration
            - 7 legal/business tools
            - 3 prompt templates
            - Service-only ID generation (no local fallback)
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}

  # Optional jobs that require additional secrets
  # Uncomment and configure as needed

  # publish-to-registry:
  #   runs-on: ubuntu-latest
  #   needs: build-and-release
  #   if: ${{ secrets.CHITTY_API_KEY }}
  #   steps:
  #     - name: Checkout code
  #       uses: actions/checkout@v4
  #     - name: Upload to ChittyOS Registry
  #       env:
  #         CHITTY_API_KEY: ${{ secrets.CHITTY_API_KEY }}
  #       run: |
  #         curl -X POST https://registry.chitty.cc/api/extensions \
  #           -H "Authorization: Bearer ${CHITTY_API_KEY}" \
  #           -F "extension=@chittyos-mcp-extension/chittyos-mcp-extension.mcpb"

  notify-release:
    runs-on: ubuntu-latest
    needs: [build-and-release]
    if: always()
    steps:
      - name: Release notification
        run: |
          VERSION="${{ github.event.inputs.version || github.ref_name }}"
          STATUS="${{ needs.build-and-release.result }}"

          if [ "$STATUS" = "success" ]; then
            echo "✅ ChittyOS MCP Extension ${VERSION} released successfully!"
          else
            echo "❌ ChittyOS MCP Extension ${VERSION} release failed"
          fi