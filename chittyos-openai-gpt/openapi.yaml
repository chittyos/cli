openapi: 3.0.0
info:
  title: ChittyOS Infrastructure API for ChatGPT
  description: AI-driven legal tech infrastructure management with Cloudflare, blockchain, and compliance integrations
  version: 1.0.0
  contact:
    name: ChittyOS Support
    url: https://chitty.cc
    email: support@chitty.cc
servers:
  - url: https://api.chitty.cc/v1
    description: ChittyOS Production API
  - url: https://gateway.chitty.cc
    description: ChittyOS Gateway Worker
  - url: https://localhost:8000
    description: Local Development

paths:
  /cloudflare/workers/deploy:
    post:
      operationId: deployWorker
      summary: Deploy Cloudflare Worker with ChittyOS tracking
      description: Deploy a new Worker script with case tracking and blockchain anchoring
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - script_name
                - script_content
              properties:
                script_name:
                  type: string
                  description: Name of the Worker script
                script_content:
                  type: string
                  description: JavaScript code for the Worker
                case_id:
                  type: string
                  description: ChittyOS case ID for tracking
                environment:
                  type: string
                  enum: [development, staging, production]
                  default: production
                compliance_requirements:
                  type: array
                  items:
                    type: string
                  description: Compliance checks to perform
      responses:
        '200':
          description: Worker deployed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeploymentResponse'

  /cloudflare/r2/buckets:
    post:
      operationId: createR2Bucket
      summary: Create R2 storage bucket
      description: Create a new R2 bucket for document storage with case linking
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - bucket_name
              properties:
                bucket_name:
                  type: string
                  description: Name of the R2 bucket
                case_id:
                  type: string
                  description: Associated case ID
                encryption:
                  type: boolean
                  default: true
                lifecycle_rules:
                  type: object
      responses:
        '200':
          description: Bucket created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BucketResponse'

  /cloudflare/d1/databases:
    post:
      operationId: createD1Database
      summary: Create D1 database
      description: Create a new D1 database for case data management
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - database_name
              properties:
                database_name:
                  type: string
                  description: Name of the D1 database
                case_id:
                  type: string
                  description: Associated case ID
                schema:
                  type: string
                  description: SQL schema to initialize
      responses:
        '200':
          description: Database created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DatabaseResponse'

  /legal/cases:
    post:
      operationId: createLegalCase
      summary: Create legal case
      description: Create a new legal case with full infrastructure provisioning
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - client_name
                - case_type
              properties:
                client_name:
                  type: string
                case_type:
                  type: string
                  enum: [litigation, contract, merger, compliance, intellectual_property]
                jurisdiction:
                  type: string
                priority:
                  type: string
                  enum: [low, normal, high, critical]
                auto_provision:
                  type: boolean
                  description: Automatically provision infrastructure
                  default: true
      responses:
        '200':
          description: Case created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CaseResponse'

  /legal/documents/analyze:
    post:
      operationId: analyzeDocument
      summary: Analyze legal document
      description: AI-powered analysis of legal documents with risk assessment
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              required:
                - document
                - case_id
              properties:
                document:
                  type: string
                  format: binary
                case_id:
                  type: string
                analysis_type:
                  type: string
                  enum: [contract_review, compliance_check, risk_assessment, discovery]
      responses:
        '200':
          description: Document analyzed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnalysisResponse'

  /finance/transactions:
    post:
      operationId: createTransaction
      summary: Create financial transaction
      description: Create and process a financial transaction with escrow support
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - from
                - to
              properties:
                amount:
                  type: number
                from:
                  type: string
                to:
                  type: string
                currency:
                  type: string
                  default: USD
                type:
                  type: string
                  enum: [transfer, payment, escrow]
                case_id:
                  type: string
      responses:
        '200':
          description: Transaction created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TransactionResponse'

  /property/listings:
    post:
      operationId: createPropertyListing
      summary: Create property listing
      description: Create a new property listing with valuation and compliance
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - address
                - price
                - type
              properties:
                address:
                  type: string
                price:
                  type: number
                type:
                  type: string
                  enum: [residential, commercial, land]
                details:
                  type: object
                  properties:
                    bedrooms:
                      type: integer
                    bathrooms:
                      type: number
                    square_feet:
                      type: integer
      responses:
        '200':
          description: Listing created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListingResponse'

  /assets/tokenize:
    post:
      operationId: tokenizeAsset
      summary: Tokenize asset on blockchain
      description: Create blockchain tokens representing real-world assets
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - asset_name
                - asset_type
                - value
              properties:
                asset_name:
                  type: string
                asset_type:
                  type: string
                  enum: [digital, physical, intellectual, financial]
                value:
                  type: number
                token_standard:
                  type: string
                  enum: [ERC20, ERC721, ERC1155]
                  default: ERC721
                total_supply:
                  type: integer
                  default: 1
      responses:
        '200':
          description: Asset tokenized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenizationResponse'

  /chain/anchor:
    post:
      operationId: anchorToBlockchain
      summary: Anchor data to blockchain
      description: Create immutable blockchain record for compliance and audit
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - data
                - type
              properties:
                data:
                  type: object
                  description: Data to anchor
                type:
                  type: string
                  enum: [document, transaction, case, evidence]
                case_id:
                  type: string
      responses:
        '200':
          description: Data anchored to blockchain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BlockchainResponse'

  /compliance/verify:
    post:
      operationId: verifyCompliance
      summary: Verify compliance requirements
      description: Check resource against compliance requirements
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - resource
                - requirements
              properties:
                resource:
                  type: object
                requirements:
                  type: array
                  items:
                    type: string
                    enum: [GDPR, CCPA, HIPAA, SOX, PCI_DSS, ISO27001]
      responses:
        '200':
          description: Compliance verified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplianceResponse'

components:
  schemas:
    DeploymentResponse:
      type: object
      properties:
        deployment_id:
          type: string
        script_name:
          type: string
        status:
          type: string
        case_link:
          type: object
        blockchain:
          type: object
        compliance:
          type: object
        url:
          type: string

    BucketResponse:
      type: object
      properties:
        bucket_id:
          type: string
        bucket_name:
          type: string
        status:
          type: string
        case_id:
          type: string
        endpoint:
          type: string

    DatabaseResponse:
      type: object
      properties:
        database_id:
          type: string
        database_name:
          type: string
        status:
          type: string
        case_id:
          type: string

    CaseResponse:
      type: object
      properties:
        case_id:
          type: string
        chitty_id:
          type: string
        status:
          type: string
        infrastructure:
          type: object
          properties:
            worker:
              type: string
            database:
              type: string
            storage:
              type: string

    AnalysisResponse:
      type: object
      properties:
        document_id:
          type: string
        case_id:
          type: string
        risk_score:
          type: number
        compliance_status:
          type: string
        key_findings:
          type: array
          items:
            type: string
        recommendations:
          type: array
          items:
            type: string

    TransactionResponse:
      type: object
      properties:
        transaction_id:
          type: string
        chitty_id:
          type: string
        status:
          type: string
        amount:
          type: number
        blockchain_tx:
          type: string

    ListingResponse:
      type: object
      properties:
        listing_id:
          type: string
        chitty_id:
          type: string
        status:
          type: string
        valuation:
          type: object

    TokenizationResponse:
      type: object
      properties:
        token_id:
          type: string
        contract_address:
          type: string
        transaction_hash:
          type: string
        total_supply:
          type: integer

    BlockchainResponse:
      type: object
      properties:
        transaction_hash:
          type: string
        block_number:
          type: integer
        timestamp:
          type: string
        network:
          type: string

    ComplianceResponse:
      type: object
      properties:
        compliant:
          type: boolean
        score:
          type: number
        issues:
          type: array
          items:
            type: string
        recommendations:
          type: array
          items:
            type: string

  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-ChittyOS-API-Key
    BearerAuth:
      type: http
      scheme: bearer

security:
  - ApiKeyAuth: []
  - BearerAuth: []